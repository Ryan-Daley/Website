"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  copy: () => copy,
  download: () => download,
  isClient: () => isClient,
  isExternal: () => isExternal,
  isMac: () => isMac,
  load: () => load,
  upload: () => upload
});
module.exports = __toCommonJS(src_exports);

// src/file.ts
var load = async (url) => {
  try {
    const res = await fetch(url);
    if (!res.ok)
      throw Error("Request error: " + res);
    return res.text();
  } catch (error) {
    return Promise.reject(error);
  }
};
var upload = (e, callback) => {
  e.stopPropagation();
  if (!e.target.files || e.target.files.length < 1)
    return;
  const file = e.target.files[0];
  let fileReader = null;
  const handleFileRead = () => {
    const content = fileReader.result;
    callback(content);
  };
  fileReader = new FileReader();
  fileReader.onloadend = handleFileRead;
  fileReader.readAsText(file);
};
var download = (filename, content) => {
  const element = document.createElement("a");
  element.setAttribute(
    "href",
    "data:text/plain;charset=utf-8," + encodeURIComponent(content)
  );
  element.setAttribute("download", filename);
  element.style.display = "none";
  document.body.appendChild(element);
  element.click();
  document.body.removeChild(element);
};

// src/common.ts
var isClient = typeof window !== "undefined";
var _a;
var isMac = isClient ? /mac/i.test(((_a = navigator.userAgentData) == null ? void 0 : _a.platform) || navigator.platform) : false;
var isExternal = (path) => {
  const outboundRE = /^(https?:|mailto:|tel:)/;
  return outboundRE.test(path);
};
var copy = (obj) => JSON.parse(JSON.stringify(obj));
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  copy,
  download,
  isClient,
  isExternal,
  isMac,
  load,
  upload
});

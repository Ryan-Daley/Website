// src/file.ts
var fetchFile = async (url) => {
  try {
    const res = await fetch(url);
    if (!res.ok)
      throw Error("Request error: " + res);
    return res.text();
  } catch (error) {
    return Promise.reject(error);
  }
};
var uploadFile = (e, callback) => {
  e.stopPropagation();
  if (!e.target.files || e.target.files.length < 1)
    return;
  const file = e.target.files[0];
  let fileReader = null;
  const handleFileRead = () => {
    const content = fileReader.result;
    callback(content);
  };
  fileReader = new FileReader();
  fileReader.onloadend = handleFileRead;
  fileReader.readAsText(file);
};
var downloadFile = (filename, content) => {
  const element = document.createElement("a");
  element.setAttribute(
    "href",
    "data:text/plain;charset=utf-8," + encodeURIComponent(content)
  );
  element.setAttribute("download", filename);
  element.style.display = "none";
  document.body.appendChild(element);
  element.click();
  document.body.removeChild(element);
};

// src/common.ts
var isClient = typeof window !== "undefined";
var _a;
var isMac = isClient ? /mac/i.test(((_a = navigator.userAgentData) == null ? void 0 : _a.platform) || navigator.platform) : false;
var isExternal = (path) => {
  const outboundRE = /^(https?:|mailto:|tel:)/;
  return outboundRE.test(path);
};
var slugify = (str) => encodeURI(
  str.trim().toLowerCase().replace(/\s+/g, "-").replace(
    /[\]\[\!\'\#\$\%\&\(\)\*\+\,\.\/\:\;\<\=\>\?\@\\\^\_\{\|\}\~\`。，、；：？！…—·ˉ¨‘’“”々～‖∶＂＇｀｜〃〔〕〈〉《》「」『』．〖〗【】（）［］｛｝]/g,
    ""
  ).replace(/^\-+/, "").replace(/\-+$/, "")
);
var copy = (obj) => JSON.parse(JSON.stringify(obj));
export {
  copy,
  downloadFile,
  fetchFile,
  isClient,
  isExternal,
  isMac,
  slugify,
  uploadFile
};
